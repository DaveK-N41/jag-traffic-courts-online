version: "3.8"

services:
  # #############################################################################################
  # ###                                 TrafficCourt BACKEND                                  ###
  # #############################################################################################

  # ---------------------------------------------------------------------------------------------
  # Citizen API
  # ---------------------------------------------------------------------------------------------
  citizen-api:
    container_name: citizen-api
    build:
      context: ./src/backend/TrafficCourts
      dockerfile: ./Citizen.Service/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: http://*:8080
      FORMRECOGNIZER__APIKEY: ${FORMRECOGNIZER__APIKEY:-}
      FORMRECOGNIZER__ENDPOINT: ${FORMRECOGNIZER__ENDPOINT:-}
      MASSTRANSIT__TRANSPORT: ${MASSTRANSIT__TRANSPORT:-InMemory}
      RABBITMQ__HOST: rabbitmq
      RABBITMQ__PORT: 5672
      RABBITMQ__USERNAME: ${RABBITMQ__USERNAME}
      RABBITMQ__PASSWORD: ${RABBITMQ__PASSWORD}
      TICKETSEARCHCLIENT__ADDRESS: ${TICKETSEARCHCLIENT__ADDRESS:-http://ticket-search:8080/}
    ports:
      - "5000:8080"
    restart: always
    depends_on: [rabbitmq, ticket-search]
    volumes:
      # mount the current users usersecrets folder
      - "${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro"

  # ---------------------------------------------------------------------------------------------
  # Ticket Search API
  # ---------------------------------------------------------------------------------------------
  ticket-search:
    container_name: ticket-search
    build:
      context: ./src/backend/TrafficCourts
      dockerfile: ./TrafficCourts.Ticket.Search.Service/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Development}
      ASPNETCORE_URLS: http://*:8080
      TICKETSEARCH__SEARCHTYPE: ${TICKETSEARCH__SEARCHTYPE:-Mock}
    ports:
      - "5100:8080"
      - "5110:8088"
    restart: always
    #depends_on: [splunk]
    volumes:
      # mount the current users usersecrets folder
      - "${APPDATA}/Microsoft/UserSecrets:/root/.microsoft/usersecrets:ro"

  #############################################################################################
  ###                           Oracle Interface API                                        ###
  #############################################################################################
  oraface-api:
    container_name: oraface-api
    build:
      context: ./src/backend/oracle-data-interface
      args:
        - SKIP_TESTS=true
        - SPLUNK_URL=${SPLUNK_URL:-http://splunk:8088}
        - SPLUNK_TOKEN=${SPLUNK_HEC_TOKEN:-token}
    ports:
      - "5010:8080"

  #############################################################################################
  ###                           Splunk                                                      ###
  ###                                                                                       ###
  ### The default configuration is loaded from file ./.docker/splunk-dev-config.yaml        ###
  ###                                                                                       ###
  ### Web: http://localhost:8000   Username: admin, Password: password                      ###
  ### HEC: http://localhost:8088   Token: token                                             ###
  #############################################################################################
  splunk:
    container_name: splunk
    image: splunk/splunk:latest
    ports:
      - 8000:8000
      - 8088:8088
    environment:
      SPLUNK_START_ARGS: --accept-license
      TZ: America/Vancouver
    volumes:
      - "./.docker/splunk-dev-config.yaml:/tmp/defaults/default.yml"
  
  # #############################################################################################
  # ###                                 TrafficCourt FRONTEND                                 ###
  # #############################################################################################
  citizen-portal:
    container_name: citizen-portal
    build:
      context: ./src/frontend/citizen-portal
      args:
        - API_BASE_PATH=${API_BASE_PATH:-http://citizen-api:8080/api/}
    restart: always
    ports:
      - "8080:8080"
    ## following is used for testing nginx.conf locally. No need to build the citizen-portal every
    ## time we change the nginx.conf, start a shell in the container and run 'service nginx reload' or '/etc/init.d/nginx reload'
    #volumes:
    #  - ./src/frontend/citizen-portal/nginx.conf:/opt/app-root/etc/nginx.default.d/default.conf
    depends_on: [citizen-api]


  # #############################################################################################
  # ###                                 TrafficCourt Staff FRONTEND                           ###
  # #############################################################################################
  staff-portal:
    container_name: staff-portal
    build:
      context: ./src/frontend/staff-portal
      args:
        - API_BASE_PATH=${API_BASE_PATH:-http://citizen-api:8080/api/}
    restart: always
    ports:
      - "8081:8080"
    depends_on: [citizen-api]
    
  #############################################################################################
  ###                           RABBITMQ                                                    ###
  #############################################################################################
  rabbitmq:
    image: rabbitmq:3.9.12-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - data-rabbit:/var/lib/rabbitmq/mnesia/rabbit@app-rabbitmq:cached
    restart: always



  #############################################################################################
  ###                           Minio                                                       ###
  #############################################################################################
  minio:
    image: minio/minio
    ports:
      - 9000:9000
      - 9001:9001
    volumes:
      - type: bind
        source: ./tools/minio
        target: /data
    environment:
      MINIO_ROOT_USER: "username" 
      MINIO_ROOT_PASSWORD: "password"
    command: server /data --console-address ":9001"

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set dockerminio http://minio:9000 username password;
      /usr/bin/mc mb dockerminio/traffic-ticket-dev;
      /usr/bin/mc policy set public dockerminio/traffic-ticket-dev;
      exit 0;
      "
  #############################################################################################
  ###                           Jaeger                                                      ###
  #############################################################################################
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14250:14250"
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"



volumes:
  data-rabbit:
  data-redis:
