server:
  port: ${SERVER_PORT:8080}
  
spring:
  application:  
    name: oracle-data-api

  jmx:
    enabled: true

  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:password}
    cluster:
      nodes: ${REDIS_CLUSTER_NODES:}
      max-redirects: ${REDIS_CLUSTER_MAX_REDIRECTS:}
    sentinel:
      master: ${REDIS_SENTINAL_MASTER:}
      nodes: ${REDIS_SENTINAL_NODES:}

management:
  trace:
    http:
      include: TIME_TAKEN,RESPONSE_HEADERS
  endpoints:
    jmx:
      exposure:
        include: health,prometheus
    web:
      exposure:
        include: httptrace,metrics,health,prometheus

metrics:
  httptrace:
    capacity: 100

springdoc:
  swagger-ui:
    path: /
    tagsSorter: alpha
    # Configure swagger to list by sorted endpoint
    operations-sorter: alpha
    # Configure swagger to list the most recent API version first
    groups-order: DESC

codetable:
  refresh:    
    # If true, will refresh code tables at startup. Codetables are cached in Redis for quick access and for high-availability
    atStartup: true

cronjob:
  codetable:
    refresh:
      # If enabled, this refresh will trigger a pull from JUSTIN to populate a cached copy of the lookup data in redis based on the cron schedule.
      enabled: ${CODETABLE_REFRESH_ENABLED:false}
       
      # A cron-like expression (defaulting to once per day at 3am), extending the usual UN*X definition to include triggers on the second, minute, hour, day of month, month, and day of week. 
      # 
      # For example, "0 * * * * MON-FRI" means once per minute on weekdays(at the top of the minute - the 0th second). 
      # 
      # The fields read from left to right are interpreted as follows:
      #  ┌───────────── second (0-59)
      #  │ ┌───────────── minute (0 - 59)
      #  │ │ ┌───────────── hour (0 - 23)
      #  │ │ │ ┌───────────── day of the month (1 - 31)
      #  │ │ │ │ ┌───────────── month (1 - 12) (or JAN-DEC)
      #  │ │ │ │ │ ┌───────────── day of the week (0 - 7)
      #  │ │ │ │ │ │          (0 or 7 is Sunday, or MON-SUN)
      #  │ │ │ │ │ │
      #  * * * * * *
      cron: ${CODETABLE_REFRESH_CRON:0 0 3 * * *}

  dispute:
    # If enabled, this unassign cronjob will clear the assignedTo and assignedTs fields on all Disputes whose assignedTs is older than 1 hour
    unassign:
      enabled: ${UNASSIGN_DISPUTES_ENABLED:false}
      # A cron-like expression (defaulting to once every 5 minutes), extending the usual UN*X definition to include triggers on the second, minute, hour, day of month, month, and day of week.
      cron: ${UNASSIGN_DISPUTES_CRON:0 */5 * * * *}
      
  jj-dispute:
    # If enabled, this unassign cronjob will clear the assignedTo and assignedTs fields on all jj-Disputes whose assignedTs is older than 1 hour
    unassign:
      enabled: ${UNASSIGN_DISPUTES_ENABLED:false}
      # A cron-like expression (defaulting to once every 5 minutes), extending the usual UN*X definition to include triggers on the second, minute, hour, day of month, month, and day of week.
      cron: ${UNASSIGN_JJDISPUTES_CRON:0 */5 * * * *}

# ORDS CLIENT properties
ords:
  api:
    auth:
      # If true, will enable basic authentication using the credentials below for all API calls
      enabled: ${ORDS_API_AUTH_ENABLED:false}
    # If true, will enable debugging for all API calls to see request/response objects 
    debug: ${ORDS_API_DEBUG:false}
    # The connection timeout limit in miliseconds
    timeout: ${ORDS_API_TIMEOUT_MS:2000}
    retry:
      # The maximum number of retry attempts to allow
      count: ${ORDS_API_RETRY_COUNT:3}
      # The Duration of the fixed delays in milliseconds
      delay: ${ORDS_API_RETRY_DELAY_SEC:5000}
    occam:
      url: ${ORDS_API_OCCAM_URL:localhost}
      # Basic auth username for calling ORDS OCCAM
      username: ${ORDS_API_OCCAM_USERNAME:username}
      # Basic auth password for calling ORDS OCCAM
      password: ${ORDS_API_OCCAM_PASSWORD:password}
    tco:
      url: ${ORDS_API_TCO_URL:localhost}
      # Basic auth username for calling ORDS TCO
      username: ${ORDS_API_TCO_USERNAME:username}
      # Basic auth password for calling ORDS TCO
      password: ${ORDS_API_TCO_PASSWORD:password}
