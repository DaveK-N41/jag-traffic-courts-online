//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace TrafficCourts.Cdogs.Client
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IDocumentGenerationClient
    {
        /// <summary>
        /// Returns a dictionary of supported input template file types and output file types.
        /// </summary>
        /// <remarks>
        /// This endpoint checks the supported file types defined by the Carbone JS library.
        /// </remarks>
        /// <returns>Returns the supported combinations of input templates and output file types</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, Anonymous>> GetFileTypesAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a dictionary of supported input template file types and output file types.
        /// </summary>
        /// <remarks>
        /// This endpoint checks the supported file types defined by the Carbone JS library.
        /// </remarks>
        /// <returns>Returns the supported combinations of input templates and output file types</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, Anonymous>> GetFileTypesAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Returns a health check.
        /// </summary>
        /// <remarks>
        /// This endpoint is used to see if the API is up and running.
        /// </remarks>
        /// <returns>Indicates API is running</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetHealthAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a health check.
        /// </summary>
        /// <remarks>
        /// This endpoint is used to see if the API is up and running.
        /// </remarks>
        /// <returns>Indicates API is running</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GetHealthAsync(System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check if generated file/report has been cached.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a generated file can be retrieved from the cache.
        /// </remarks>
        /// <param name="uid">Hash for file, returned via X-Report-Hash headers when report generated</param>
        /// <param name="download">Indicate if the response should return the binary file</param>
        /// <returns>Returns OK if file can be found in cache; also returns file if download=true</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetReportAsync(string uid, bool? download);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check if generated file/report has been cached.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a generated file can be retrieved from the cache.
        /// </remarks>
        /// <param name="uid">Hash for file, returned via X-Report-Hash headers when report generated</param>
        /// <param name="download">Indicate if the response should return the binary file</param>
        /// <returns>Returns OK if file can be found in cache; also returns file if download=true</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetReportAsync(string uid, bool? download, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove file from cache.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a file has been removed from cache.
        /// </remarks>
        /// <param name="uid">Hash for file, returned via X-Report-Hash headers when report generated</param>
        /// <returns>Returns OK if file was found and removed/deleted</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteReportAsync(string uid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove file from cache.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a file has been removed from cache.
        /// </remarks>
        /// <param name="uid">Hash for file, returned via X-Report-Hash headers when report generated</param>
        /// <returns>Returns OK if file was found and removed/deleted</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteReportAsync(string uid, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Upload a template
        /// </summary>
        /// <remarks>
        /// This endpoint accepts a template to be used for report generation/render.
        /// </remarks>
        /// <returns>Returns the supplied document with variables merged in</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UploadTemplateAsync(FileParameter template);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload a template
        /// </summary>
        /// <remarks>
        /// This endpoint accepts a template to be used for report generation/render.
        /// </remarks>
        /// <returns>Returns the supplied document with variables merged in</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> UploadTemplateAsync(FileParameter template, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Check if template has been cached.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a template file can be retrieved from the cache.
        /// </remarks>
        /// <param name="uid">Hash for template, returned via X-Template-Hash headers when template uploaded</param>
        /// <param name="download">Indicate if the response should return the binary file</param>
        /// <returns>Returns OK if file can be found in cache; also returns file if download=true</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetTemplateAsync(string uid, bool? download);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check if template has been cached.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a template file can be retrieved from the cache.
        /// </remarks>
        /// <param name="uid">Hash for template, returned via X-Template-Hash headers when template uploaded</param>
        /// <param name="download">Indicate if the response should return the binary file</param>
        /// <returns>Returns OK if file can be found in cache; also returns file if download=true</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GetTemplateAsync(string uid, bool? download, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Remove file from cache.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a file has been removed from cache.
        /// </remarks>
        /// <param name="uid">Hash for file, returned via X-Template-Hash headers when template uploaded</param>
        /// <returns>Returns OK if file was found and removed/deleted</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTemplateAsync(string uid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove file from cache.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a file has been removed from cache.
        /// </remarks>
        /// <param name="uid">Hash for file, returned via X-Template-Hash headers when template uploaded</param>
        /// <returns>Returns OK if file was found and removed/deleted</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteTemplateAsync(string uid, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Generate a document from existing Template
        /// </summary>
        /// <remarks>
        /// This endpoint accepts a document template id and a set (or multiple sets) of substitution variables and merges them into the document.
        /// </remarks>
        /// <param name="uid">Hash for template, returned via X-Template-Hash headers when template uploaded</param>
        /// <param name="body">Fields required to generate a document</param>
        /// <returns>Returns the supplied document with variables merged in</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> RenderReportFromTemplateAsync(string uid, TemplateObject body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a document from existing Template
        /// </summary>
        /// <remarks>
        /// This endpoint accepts a document template id and a set (or multiple sets) of substitution variables and merges them into the document.
        /// </remarks>
        /// <param name="uid">Hash for template, returned via X-Template-Hash headers when template uploaded</param>
        /// <param name="body">Fields required to generate a document</param>
        /// <returns>Returns the supplied document with variables merged in</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> RenderReportFromTemplateAsync(string uid, TemplateObject body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Generate document from inline Template
        /// </summary>
        /// <remarks>
        /// This endpoint accepts a document template and a set (or multiple sets) of substitution variables and merges them into the document.
        /// </remarks>
        /// <param name="body">Fields required to generate a document</param>
        /// <returns>Returns the supplied document with variables merged in</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UploadTemplateAndRenderReportAsync(TemplateRenderObject body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate document from inline Template
        /// </summary>
        /// <remarks>
        /// This endpoint accepts a document template and a set (or multiple sets) of substitution variables and merges them into the document.
        /// </remarks>
        /// <param name="body">Fields required to generate a document</param>
        /// <returns>Returns the supplied document with variables merged in</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> UploadTemplateAndRenderReportAsync(TemplateRenderObject body, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentGenerationClient : IDocumentGenerationClient
    {
        private string _baseUrl = "/api/v2";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public DocumentGenerationClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings, true);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Returns a dictionary of supported input template file types and output file types.
        /// </summary>
        /// <remarks>
        /// This endpoint checks the supported file types defined by the Carbone JS library.
        /// </remarks>
        /// <returns>Returns the supported combinations of input templates and output file types</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, Anonymous>> GetFileTypesAsync()
        {
            return GetFileTypesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a dictionary of supported input template file types and output file types.
        /// </summary>
        /// <remarks>
        /// This endpoint checks the supported file types defined by the Carbone JS library.
        /// </remarks>
        /// <returns>Returns the supported combinations of input templates and output file types</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, Anonymous>> GetFileTypesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/fileTypes");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, Anonymous>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Returns a health check.
        /// </summary>
        /// <remarks>
        /// This endpoint is used to see if the API is up and running.
        /// </remarks>
        /// <returns>Indicates API is running</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task GetHealthAsync()
        {
            return GetHealthAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a health check.
        /// </summary>
        /// <remarks>
        /// This endpoint is used to see if the API is up and running.
        /// </remarks>
        /// <returns>Indicates API is running</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task GetHealthAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/health");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Check if generated file/report has been cached.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a generated file can be retrieved from the cache.
        /// </remarks>
        /// <param name="uid">Hash for file, returned via X-Report-Hash headers when report generated</param>
        /// <param name="download">Indicate if the response should return the binary file</param>
        /// <returns>Returns OK if file can be found in cache; also returns file if download=true</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> GetReportAsync(string uid, bool? download)
        {
            return GetReportAsync(uid, download, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check if generated file/report has been cached.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a generated file can be retrieved from the cache.
        /// </remarks>
        /// <param name="uid">Hash for file, returned via X-Report-Hash headers when report generated</param>
        /// <param name="download">Indicate if the response should return the binary file</param>
        /// <returns>Returns OK if file can be found in cache; also returns file if download=true</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GetReportAsync(string uid, bool? download, System.Threading.CancellationToken cancellationToken)
        {
            if (uid == null)
                throw new System.ArgumentNullException("uid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/render/{uid}?");
            urlBuilder_.Replace("{uid}", System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture)));
            if (download != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("download") + "=").Append(System.Uri.EscapeDataString(ConvertToString(download, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<BadRequest>("Request is missing content or is malformed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NotFound>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<NotFound>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove file from cache.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a file has been removed from cache.
        /// </remarks>
        /// <param name="uid">Hash for file, returned via X-Report-Hash headers when report generated</param>
        /// <returns>Returns OK if file was found and removed/deleted</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteReportAsync(string uid)
        {
            return DeleteReportAsync(uid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove file from cache.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a file has been removed from cache.
        /// </remarks>
        /// <param name="uid">Hash for file, returned via X-Report-Hash headers when report generated</param>
        /// <returns>Returns OK if file was found and removed/deleted</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteReportAsync(string uid, System.Threading.CancellationToken cancellationToken)
        {
            if (uid == null)
                throw new System.ArgumentNullException("uid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/render/{uid}");
            urlBuilder_.Replace("{uid}", System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<BadRequest>("Request is missing content or is malformed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NotFound>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<NotFound>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Upload a template
        /// </summary>
        /// <remarks>
        /// This endpoint accepts a template to be used for report generation/render.
        /// </remarks>
        /// <returns>Returns the supplied document with variables merged in</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<string> UploadTemplateAsync(FileParameter template)
        {
            return UploadTemplateAsync(template, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload a template
        /// </summary>
        /// <remarks>
        /// This endpoint accepts a template to be used for report generation/render.
        /// </remarks>
        /// <returns>Returns the supplied document with variables merged in</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> UploadTemplateAsync(FileParameter template, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/template");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (template == null)
                        throw new System.ArgumentNullException("template");
                    else
                    {
                        var content_template_ = new System.Net.Http.StreamContent(template.Data);
                        if (!string.IsNullOrEmpty(template.ContentType))
                            content_template_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(template.ContentType);
                        content_.Add(content_template_, "template", template.FileName ?? "template");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<BadRequest>("Request is missing content or is malformed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<Response>("Template already cached", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<ValidationError>("The server was unable to process the contained instructions. Generally validation error(s).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Check if template has been cached.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a template file can be retrieved from the cache.
        /// </remarks>
        /// <param name="uid">Hash for template, returned via X-Template-Hash headers when template uploaded</param>
        /// <param name="download">Indicate if the response should return the binary file</param>
        /// <returns>Returns OK if file can be found in cache; also returns file if download=true</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> GetTemplateAsync(string uid, bool? download)
        {
            return GetTemplateAsync(uid, download, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check if template has been cached.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a template file can be retrieved from the cache.
        /// </remarks>
        /// <param name="uid">Hash for template, returned via X-Template-Hash headers when template uploaded</param>
        /// <param name="download">Indicate if the response should return the binary file</param>
        /// <returns>Returns OK if file can be found in cache; also returns file if download=true</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> GetTemplateAsync(string uid, bool? download, System.Threading.CancellationToken cancellationToken)
        {
            if (uid == null)
                throw new System.ArgumentNullException("uid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/template/{uid}?");
            urlBuilder_.Replace("{uid}", System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture)));
            if (download != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("download") + "=").Append(System.Uri.EscapeDataString(ConvertToString(download, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<BadRequest>("Request is missing content or is malformed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NotFound>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<NotFound>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove file from cache.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a file has been removed from cache.
        /// </remarks>
        /// <param name="uid">Hash for file, returned via X-Template-Hash headers when template uploaded</param>
        /// <returns>Returns OK if file was found and removed/deleted</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteTemplateAsync(string uid)
        {
            return DeleteTemplateAsync(uid, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove file from cache.
        /// </summary>
        /// <remarks>
        /// This endpoint returns OK if a file has been removed from cache.
        /// </remarks>
        /// <param name="uid">Hash for file, returned via X-Template-Hash headers when template uploaded</param>
        /// <returns>Returns OK if file was found and removed/deleted</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteTemplateAsync(string uid, System.Threading.CancellationToken cancellationToken)
        {
            if (uid == null)
                throw new System.ArgumentNullException("uid");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/template/{uid}");
            urlBuilder_.Replace("{uid}", System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<BadRequest>("Request is missing content or is malformed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NotFound>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<NotFound>("Not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Generate a document from existing Template
        /// </summary>
        /// <remarks>
        /// This endpoint accepts a document template id and a set (or multiple sets) of substitution variables and merges them into the document.
        /// </remarks>
        /// <param name="uid">Hash for template, returned via X-Template-Hash headers when template uploaded</param>
        /// <param name="body">Fields required to generate a document</param>
        /// <returns>Returns the supplied document with variables merged in</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> RenderReportFromTemplateAsync(string uid, TemplateObject body)
        {
            return RenderReportFromTemplateAsync(uid, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a document from existing Template
        /// </summary>
        /// <remarks>
        /// This endpoint accepts a document template id and a set (or multiple sets) of substitution variables and merges them into the document.
        /// </remarks>
        /// <param name="uid">Hash for template, returned via X-Template-Hash headers when template uploaded</param>
        /// <param name="body">Fields required to generate a document</param>
        /// <returns>Returns the supplied document with variables merged in</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> RenderReportFromTemplateAsync(string uid, TemplateObject body, System.Threading.CancellationToken cancellationToken)
        {
            if (uid == null)
                throw new System.ArgumentNullException("uid");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/template/{uid}/render");
            urlBuilder_.Replace("{uid}", System.Uri.EscapeDataString(ConvertToString(uid, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<BadRequest>("Request is missing content or is malformed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MethodNotAllowed>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<MethodNotAllowed>("Method not allowed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<ValidationError>("The server was unable to process the contained instructions. Generally validation error(s).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Generate document from inline Template
        /// </summary>
        /// <remarks>
        /// This endpoint accepts a document template and a set (or multiple sets) of substitution variables and merges them into the document.
        /// </remarks>
        /// <param name="body">Fields required to generate a document</param>
        /// <returns>Returns the supplied document with variables merged in</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FileResponse> UploadTemplateAndRenderReportAsync(TemplateRenderObject body)
        {
            return UploadTemplateAndRenderReportAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate document from inline Template
        /// </summary>
        /// <remarks>
        /// This endpoint accepts a document template and a set (or multiple sets) of substitution variables and merges them into the document.
        /// </remarks>
        /// <param name="body">Fields required to generate a document</param>
        /// <returns>Returns the supplied document with variables merged in</returns>
        /// <exception cref="DocumentGenerationApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> UploadTemplateAndRenderReportAsync(TemplateRenderObject body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/template/render");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value);
                    var content_ = new System.Net.Http.StringContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BadRequest>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<BadRequest>("Request is missing content or is malformed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 405)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MethodNotAllowed>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<MethodNotAllowed>("Method not allowed", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 422)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ValidationError>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<ValidationError>("The server was unable to process the contained instructions. Generally validation error(s).", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new DocumentGenerationApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new DocumentGenerationApiException<Error>("Unexpected error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new DocumentGenerationApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new DocumentGenerationApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BadRequest : Problem
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Title { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error : Problem
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Title { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileTypes : System.Collections.Generic.Dictionary<string, Anonymous>
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InlineTemplateObject
    {
        /// <summary>
        /// String, Buffer or a Stream contents for the attachment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Content { get; set; } = default!;

        /// <summary>
        /// If set and content is string, then encodes the content to a Buffer using the specified encoding. Example values: 'base64', 'hex', 'binary' etc. Useful if you want to use binary attachments in a JSON formatted email object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encodingType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InlineTemplateObjectEncodingType EncodingType { get; set; } = default!;

        /// <summary>
        /// The file extension of the encoded content file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FileType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MethodNotAllowed : Problem
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Title { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotFound : Problem
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Title { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Problem
    {
        /// <summary>
        /// What type of problem, link to explanation of problem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        /// <summary>
        /// Title of problem, generally the Http Status Code description
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; } = default!;

        /// <summary>
        /// The Http Status code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = default!;

        /// <summary>
        /// Short description of why this problem was raised.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemplateObject
    {
        /// <summary>
        /// A freeform JSON object of key-value pairs or array of freeform JSON object key-value pairs.  All keys must be alphanumeric or underscore.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Data { get; set; } = default!;

        /// <summary>
        /// A string that can be transformed into an object. See https://www.npmjs.com/package/telejson for transformations, and https://carbone.io/documentation.html#formatters for more on formatters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formatters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Formatters { get; set; } = default!;

        /// <summary>
        /// Object containing processing options
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Options Options { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemplateRenderObject : TemplateObject
    {
        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Template Template { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidationError : Problem
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IList<Errors> Errors { get; set; } = new System.Collections.ObjectModel.Collection<Errors>();

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Status { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Title { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {
        [Newtonsoft.Json.JsonProperty("inputFileType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InputFileType { get; set; } = default!;

        [Newtonsoft.Json.JsonProperty("outputFileTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IList<string> OutputFileTypes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Response
    {
        /// <summary>
        /// What type of problem, link to explanation of problem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        /// <summary>
        /// Title of problem, generally the Http Status Code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; } = default!;

        /// <summary>
        /// The Http Status code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = default!;

        /// <summary>
        /// Short description of why this problem was raised.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Detail { get; set; } = default!;

        /// <summary>
        /// UUID for template cached on server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hash", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Hash { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InlineTemplateObjectEncodingType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"base64")]
        Base64 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"binary")]
        Binary = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hex")]
        Hex = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Options
    {
        /// <summary>
        /// If true, cache the generated report on server, return the hash/UUID for the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cacheReport", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CacheReport { get; set; } = default!;

        /// <summary>
        /// The desired file extension of the generated document, used for converting to other types of document. If not supplied, will just use the original contentFileType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("convertTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConvertTo { get; set; } = default!;

        /// <summary>
        /// For inline template uploading, will allow the template to overwrite if already cached.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overwrite", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Overwrite { get; set; } = default!;

        /// <summary>
        /// The desired file name of the generated document, can accept template substitution fields from the contexts. If not supplied, will use a random UUID.  Extension will be from convertTo.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reportName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReportName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Template : InlineTemplateObject
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Errors
    {
        /// <summary>
        /// Contents of the field that was in error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; } = default!;

        /// <summary>
        /// The error message for the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName, string? contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string? FileName { get; private set; }

        public string? ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable? _client;
        private System.IDisposable? _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentGenerationApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public DocumentGenerationApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentGenerationApiException<TResult> : DocumentGenerationApiException
    {
        public TResult Result { get; private set; }

        public DocumentGenerationApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604